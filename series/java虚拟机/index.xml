<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java虚拟机 on Gao J1e&#39;s Blog</title>
    <link>https://gj1e.github.io/series/java%E8%99%9A%E6%8B%9F%E6%9C%BA/</link>
    <description>Recent content in Java虚拟机 on Gao J1e&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>郜杰</copyright>
    <lastBuildDate>Sun, 15 Mar 2020 17:58:46 +0800</lastBuildDate>
    
	<atom:link href="https://gj1e.github.io/series/java%E8%99%9A%E6%8B%9F%E6%9C%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JVM堆外内存回收</title>
      <link>https://gj1e.github.io/posts/2020/03/jvm%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Sun, 15 Mar 2020 17:58:46 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2020/03/jvm%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6/</guid>
      <description>堆外内存 JVM启动时分配的内存，称为堆内存，与之相对的，在代码中还可以使用堆外内存，比如Netty，广泛使用了堆外内存，但是这部分的内存并不归JVM管理，GC算法并不会对它们进行回收，所以在使用堆外内存时，要格外小心，防止内存一直得不到释放，造成线上故障。
堆外内存的回收机制 用一个存储在堆内存中的DirectByteBuffer对象来对堆外内存进行操作。每个DirectByteBuffer对象在进行初始化时，都会创建一个Clearn对象，这个Clearn对象会在合适的时候执行unSafe.freeMemory（address），从而回收这块堆内存。
 当初始化一块堆外内存时，对象的引用关系如下：
 first是cleaner类的静态变量，cleaner对象在初始化的时候会被添加到Cleaner链表中，和first形成引用关系。 ReferenceQueue是用来保存Clearner对象的。
如果该DirectByteBuffer在一次GC中被回收了，那么就只有Cleaner对象唯一存有该堆外内存数据（开始地址，大小容量），在下一次FullGC时，会将该Cleaner对象放入到ReferenceQueue队列中，并触发clean方法。
Cleaner对象的clean方法主要作用是：
 将自己从Cleaner链表中删除，从而在下次FullGC时可以被回收掉。 释放对外内存
public void run() { if (address == 0) { // Paranoia return; } unsafe.freeMemory(address); address = 0; Bits.unreserveMemory(size, capacity); }   如果JVM一直不进行FullGC，那么无效的Cleaner对象会越来越多并且也没有办法放入到ReferenceQueue中，从而堆外内存也就无法进行释放？ 其实在初始化DirectByteBuffer对象时，如果当前堆外内存的条件比较苛刻时，就会主动调用system.gc()，强制执行FullGC。
 不过很多线上环境的JVM参数有-XX:+DisableExplicitGC，导致了System.gc()等于一个空函数，根本不会触发FGC，这一点在使用Netty框架时需要注意是否会出问题。
 参考博客</description>
    </item>
    
    <item>
      <title>JVM堆空间知识点</title>
      <link>https://gj1e.github.io/posts/2019/12/jvm%E5%A0%86%E7%A9%BA%E9%97%B4%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Wed, 25 Dec 2019 20:50:39 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/12/jvm%E5%A0%86%E7%A9%BA%E9%97%B4%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description> 堆空间的基本结构 Java堆是垃圾收集器管理的主要区域，因此也被称作GC堆。
对象从新生代到老年代的过程 “eden区”，“From&amp;rdquo;区和&amp;rdquo;To&amp;rdquo;区都属于新生代，“old”区属于老年代。
 一般新生成的对象都出现在eden区。在一次新生代垃圾回收后，如果对象还存活，则会被复制到两个“survivor”区中的一个，假设是From区（From和To没有任何区别）。
 当From区被填满时，这个区域经过垃圾回收人存货的对象将会被复制进‘To’区，原From区被清空，并且从eden区过来的数据将直接进入To区域。
 当To区被填满时，之前从From区域过来的那部分数据如果仍在活动，则将会被放入老年代。
   两个Servivor区域总有一个会是空的
 </description>
    </item>
    
    <item>
      <title>JVM垃圾收集器</title>
      <link>https://gj1e.github.io/posts/2019/10/jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</link>
      <pubDate>Wed, 30 Oct 2019 20:41:32 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/10/jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</guid>
      <description>垃圾收集器主要用于堆内存中。
 图中垃圾收集器之间有连线的，就代表可以相互配合使用。
 Serial、ParNew、Parallel Scavenge用于新生代；CMS、Serial Old、Paralled Old用于老年代。 并且他们相互之间以相对固定的组合使用。G1是一个独立的收集器不依赖其他6种收集器。
Serial收集器  它是单线程的收集器，使用复制算法。在进行垃圾回收时需要停止其他的所有工作线程(Stop The World)。  ParNew收集器  它其实就是Serial收集器的多线程版本，使用的是复制算法。
 它在单线程环境下没有Serial好，因为存在线程开销。但随着CPU的增加就可以体现出优势。
 它默认开启的收集线程数与CPU的数量相同。
  Parallel Scavenge收集器  用于新生代，多线程并行，使用复制算法与ParNew相似。
 与ParNew不同的是，它更关注垃圾回收的吞吐量。它提供两个参数，一个用于控制最大垃圾收集停顿时间，一个用于控制吞吐量大小。
   吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)
最大垃圾收集停顿时间越小，系统设置新生代越少，GC频率增加。停顿时间缩短是以牺牲吞吐量和新生代空间换取的
 Parallel Old收集器  Parallel Old收集器，老年代的收集器，是Parallel Scavenge老年代的版本。但是使用的是标记-整理算法。
 Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较不错的应用组合，在注重吞吐量及CPU资源敏感的场合，可以优先考虑Parallel Scavenge收集器+Parallel Old收集器。
  Serial Old收集器  Serial Old收集器，老年代的收集器，与Serial一样是单线程。不同的是算法用的是标记-整理，因为老年代里面对象的存活率高，如果依旧是用复制算法，需要复制的内容较多，性能较差。  CMS收集器  它是一种以最短垃圾回收停顿时间为目标的收集器，使用的是标记——清除算法。 运作过程分为四步：初始标记-&amp;gt;并发标记-&amp;gt;重新标记-&amp;gt;并发清理。其中初始标记和重新标记这两步仍然需要暂停用户所有线程。
 初始标记：仅仅只标记一下GCRoots可以直接关联到的对象，速度很快。
 并发标记：是从GCRoot开始继续向下进行标记。
 重新标记：是为了修正并发标记期间发生变动的标记，这个阶段停顿时间比初始标记长，比并发标记短。
 并发清除：清除老年代的垃圾。
   缺点：</description>
    </item>
    
    <item>
      <title>JVM垃圾收集算法</title>
      <link>https://gj1e.github.io/posts/2019/10/jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 30 Oct 2019 20:41:22 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/10/jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</guid>
      <description> JVM的垃圾收集算法常见有四种：标记清除算法，标记整理算法，复制算法，和分代收集算法
标记——清除  该算法分为“标记”和“清除&amp;rdquo;两个阶段。
 首先标记出所需要回收的对象，在标记完成之后统一回收所有被标记的对象。
 它是最基础的收集算法。
  缺点： 1. 效率问题 2. 空间问题（标记清除之后会产生大量不连续的碎片）
标记——整理  根据老年代的特点推出的一种标记算法，标记过程和“标记清除&amp;rdquo;算法一样，但是后续不是对回收的对象进行回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。  复制算法  它可以将内存划分为大小相同的两块，每次只使用其中的一块。当这一块内存用完了，它就将还存活着的对象复制到另外一块内存中，然后把使用过的内存空间一次清理掉。 每次的内存回收都是对内存区间的一半进行回收。  缺点： 1. 会浪费一定的内存空间 2. 对象的存活率较高时，复制会降低效率
分代收集算法  这种算法是根据对象存活周期的不同，将内存分为几块，一般是把Java堆分为新生代和老年代。然后根据各个年代的特点采用适当的收集算法。
 新生代:
 每次垃圾收集时都会有大批对象死去，存活率较低，只有少量存活。这样可以采用复制算法，只需付出少量的复制成本就可以完成收集。  老年代：
 老年代对象的特点就是存活率较高，没有额外的空间进行分配担保，这样就必须使用&amp;rdquo;标记——整理&amp;rdquo;或者“标记——清除”算法来进行回收。   </description>
    </item>
    
    <item>
      <title>Java对象的创建及类加载的过程</title>
      <link>https://gj1e.github.io/posts/2019/10/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 22 Oct 2019 18:47:37 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/10/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%BF%87%E7%A8%8B/</guid>
      <description>Java对象的创建过程 创建过程分为五步：
 类加载检查
 当Java虚拟据遇到一条new指令时，首先检查这个指令中的参数能否在常量池中定位到一个类的符号引用，并检查这个符号引用代表的类是否已被加载，解析，初始化。如果没有，则先执行相应的类加载过程。  分配内存空间
 当类加载检查通过之后，就应该为对象分配内存空间。对象所需的内存大小在类加载完成后就能确定。 分配的方式主要有指针碰撞和空闲列表两种方式，选择哪种分配方式由Java堆是否规整来决定，而 Java 堆内存是否规整，取决于 GC 收集器的算法是&amp;rdquo;标记-清除&amp;rdquo;，还是&amp;rdquo;标记-整理&amp;rdquo;（也称作&amp;rdquo;标记-压缩&amp;rdquo;），值得注意的是，复制算法内存也是规整的  初始化零值
 当内存分配完毕之后，就应该将分配到的内存空间初始化为零值(不包括对象头)。 这一步操作保证了对象的实例字段在Java代码中可以不赋值就直接使用，程序可以访问到这些字段的数据类型所对应的零值。  设置对象头
 初始化零值完成之后，虚拟机要对对象进行必要的设置，例如元数据信息，哈希码，GC分代年龄等信息）  执行init方法
 执行new指令之后，紧接着会执行init方法，把对象按照程序员的意愿进行初始化。这样一个对象才算是完全产生出来。   内存分配的两种方式  指针碰撞
 用过的内存全部整合到一边，没用过的放在另一边，中间有一个分界指针。分配时，只需要向着没有用过的方向，将该指针移动对象内存大小的位置即可。 GC收集器：Serial，ParNew - 适用于堆内存规整的情况下(没有内存碎片)。  空闲列表
 虚拟机会维护一个列表，记录上哪些内存块是可用的。再分配时，从列表中找到一块足够的空间划分给对象实例，并更新列表上的记录。 GC收集器：CMS 适用于堆内存不规整的情况。   内存分配并发问题  CAS+失败重试
 CAS是乐观锁的一种实现方式，虚拟机采用CAS配上失败重试的方式保证更新操作的原子性。  TLAB
 每个线程在Java堆中预先分配一小块内存，哪个线程要分配内存，就在哪个线程的TALB上分配，当对象大于TALB中的剩余内存，或TALB的内存用尽时，在采用上面的CAS进行内存分配。   Java中类加载的过程 类加载的过程为：加载——&amp;gt;验证——&amp;gt;准备——&amp;gt;解析——&amp;gt;初始化，总共五步。
加载  通过全类名获取定义此类的二进制字节流。 将字节流所代表的静态存储结构转化为方法区的运行时存储结构。 在内存中生成一个代表该类的Class对象，做为方法区访问的入口。   数组类型不通过类加载器创建，它由Java虚拟机直接创建。
 验证 验证Class文件中的字节流是否符合Java虚拟机的规范，包括元数据信息的验证和文件格式的验证等。</description>
    </item>
    
    <item>
      <title>JVM内存区域</title>
      <link>https://gj1e.github.io/posts/2019/10/jvm%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</link>
      <pubDate>Tue, 22 Oct 2019 15:15:49 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/10/jvm%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</guid>
      <description>运行时数据区  Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。
 JDK1.8之前的
   JDK1.8 和之前的版本略有不同，
  线程共享
 堆，方法区，直接内存  线程私有
 程序计数器，本地方法栈，虚拟机栈   堆  堆是Java虚拟机所管理的内存中最大的一块，Java堆是所有线程共享的，主要用来存放实例对象以及数组。
 堆也是垃圾回收的主要区域，垃圾回收主要采用的是分代回收，分为新生代和老年代。
 Java堆可以是内存上不连续的的区域，只要逻辑上联系即可。
 堆空间不足时会抛出：OutOfMemoryError。
  方法区  方法区和Java堆一样，也是线程共享的。方法区主要用来存放已被虚拟机加载的类信息，常量，静态变量，和编译后的代码。
 方法区空间不足时会抛出:OutOfMemoryError。
  运行时常量池  运行时常量池是方法区的一部分，用于存放编译期间所产生的字面量和符号引用。这部分内容将在类加载后进入方法区的运行时常量池中。
 运行时常量池，相比于Class文件中的常量池一个重要的特征就是具备动态性，可以在运行期间，通过String类的intern()方法将新的常量放入池中。
 运行时常量池受方法区的内存限制，当常量池无法在申请到足够的内存时会抛出： OutOfMemoryError。
  程序计数器  程序计数器是虚拟机管理的内存中较小的一块，它可以看作是当前程序执行的字节码文件的行号指示器。
 它是线程私有的，各线程之间的程序计数器，相互独立，互不干扰。
 程序计数器是唯一一个不会出现OutOfMemoryError的内存区域。
 它的生命周期和线程一样。
  虚拟机栈  虚拟机栈和程序计数器一样，也是线程私有的，它的生命周期和线程相同。描述的是Java方法执行的内存模型。
 每个方法在执行时，都会创建一个栈帧，栈帧中拥有局部变量表，操作数栈，动态链接，方法出口等信息。
 每一次函数调用都会有一个对应的栈帧被压入java栈，函数调用结束后，都会有一个相应的栈帧被弹出。</description>
    </item>
    
  </channel>
</rss>