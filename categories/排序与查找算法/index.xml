<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>排序与查找算法 on Gao J1e&#39;s Blog</title>
    <link>https://gj1e.github.io/categories/%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 排序与查找算法 on Gao J1e&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>郜杰</copyright>
    <lastBuildDate>Thu, 12 Dec 2019 23:29:33 +0800</lastBuildDate>
    
	<atom:link href="https://gj1e.github.io/categories/%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>插入排序</title>
      <link>https://gj1e.github.io/posts/2019/12/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 12 Dec 2019 23:29:33 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/12/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description> 插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。  “算法步骤”
 将第一个待排序序列的元素看作一个有序序列，把第二个到最后一个元素看作是未排序的序列。
 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置，（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）
  /** * @Author GJ1e * @Create 2019/9/21 * @Time 17:44 * */ public class InsertionSort { private static void sort (Comparable[] a){ for (int i = 1;i&amp;lt;a.length;i++){ //从第二个元素开始，第一个元素默认已排序好。 for(int j = i;j&amp;gt;0&amp;amp;&amp;amp;a[j].compareTo(a[j-1])&amp;lt;0;j--){ //a[j]&amp;lt;a[j-1],交换。 Comparable temp = a[j]; a[j] = a[j-1]; a[j-1] = temp; } } } }  </description>
    </item>
    
    <item>
      <title>快速排序</title>
      <link>https://gj1e.github.io/posts/2019/12/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 06 Dec 2019 23:08:21 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/12/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。
 在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。
 快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。
  /** * @Author GJ1e * @Create 2019/9/21 * @Time 11:26 * */ public class QuickSort { public static void sort (Comparable[] a,int start,int end){ if(start&amp;gt;=end) return; int j = partition(a,start,end); sort(a,start,j-1); sort(a,j+1,end); } private static int partition (Comparable[] a,int start,int end){ int i = start; int j = end+1; Comparable v = a[start]; //设置切分元素 while (true){ while (v.</description>
    </item>
    
    <item>
      <title>冒泡排序</title>
      <link>https://gj1e.github.io/posts/2019/12/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 06 Dec 2019 22:53:25 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/12/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>  冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。
 冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。
  “算法步骤”  比较相邻的两个元素，如果前者比后者大，就交换。
 对每一对相邻的元素做同样的工作，从开始的第一对，到结尾的最后一对。都执行完之后，最后一个元素是最大的。
 继续针对所有的元素重复以上的步骤，最后一个除外。
 持续每次对越来越少的元素重复以上的步骤，直到没有任何一对元素需要比较。
  /** * @Author GJ1e * @Create 2019/9/21 * @Time 15:47 * */ public class BubbleSort { private static void sort (Comparable[] a){ if(a==null||a.length&amp;lt;=1) return; for (int i = 0;i&amp;lt;a.length-1;i++){ //设置一个flag标记 boolean flag = true; for (int j = 0;j&amp;lt;a.length-1;j++){ if (a[j].compareTo(a[j+1])&amp;gt;0){ Comparable temp = a[j]; a[j]=a[j+1]; a[j+1]=temp; flag = false; } } if (flag) break; } } }  </description>
    </item>
    
  </channel>
</rss>