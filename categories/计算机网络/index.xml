<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机网络 on Gao J1e&#39;s Blog</title>
    <link>https://gj1e.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on Gao J1e&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>郜杰</copyright>
    <lastBuildDate>Thu, 17 Oct 2019 16:28:41 +0800</lastBuildDate>
    
	<atom:link href="https://gj1e.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>计网5层体系结构简介</title>
      <link>https://gj1e.github.io/posts/2019/10/%E8%AE%A1%E7%BD%915%E5%B1%82%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 17 Oct 2019 16:28:41 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/10/%E8%AE%A1%E7%BD%915%E5%B1%82%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B/</guid>
      <description>学习计算机网络时我们一般采用折中的办法，也就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构，这样既简洁又能将概念阐述清楚。 应用层 应用层(application-layer）的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统DNS，支持万维网应用的 HTTP协议，支持电子邮件的 SMTP协议等等。我们把应用层交互的数据单元称为报文。
域名系统  域名系统(Domain Name System缩写 DNS，Domain Name被译为域名)是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。（百度百科）例如：一个公司的 Web 网站可看作是它在网上的门户，而域名就相当于其门牌地址，通常域名都使用该公司的名称或简称。例如上面提到的微软公司的域名，类似的还有：IBM 公司的域名是 www.ibm.com、Oracle 公司的域名是 www.oracle.com、Cisco公司的域名是 www.cisco.com 等。
 HTTP协议  超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的 WWW（万维网） 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。（百度百科）
 运输层 运输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。
运输层主要使用以下两种协议:  传输控制协议 TCP（Transmission Control Protocol）&amp;ndash;提供面向连接的，可靠的数据传输服务。
 用户数据协议 UDP（User Datagram Protocol）&amp;ndash;提供无连接的，尽最大努力的数据传输服务（不保证数据传输的可靠性）。
  网络层 在计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。 在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报 ，简称 数据报。
这里要注意：不要把运输层的“用户数据报 UDP ”和网络层的“ IP 数据报”弄混。另外，无论是哪一层的数据单元，都可笼统地用“分组”来表示。</description>
    </item>
    
    <item>
      <title>TCP协议与UDP协议</title>
      <link>https://gj1e.github.io/posts/2019/10/tcp%E5%8D%8F%E8%AE%AE%E4%B8%8Eudp%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Thu, 17 Oct 2019 16:27:33 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/10/tcp%E5%8D%8F%E8%AE%AE%E4%B8%8Eudp%E5%8D%8F%E8%AE%AE/</guid>
      <description> TCP和UDP的区别  TCP是面向连接的协议，也就是说在收发数据前必须先和对方建立起可靠的连接。一个TCP协议的连接需要经过“三次”会话才能建立起来。TCP协议提供超时重发，丢弃重复数据，校验数据，流量控制等功能。TCP协议可以保证将数据从一端传送到另一端，当数据从A端传送到B端时，B端会向A端发送一个确认包（ACK包）来告知A端“你发送的数据我已收到”，UDP就没有这种确认机制，这就是为什么说TCP是可靠的，UDP是不可靠的。TCP提供了可靠的数据传输，但是TCP协议提供的拥塞控制，重传机制，数据校验等功能会加大网络带宽的开销，因为虚拟信道是持续存在的，并且网络中还会出现大量的ACK包，和FIN包。
 UDP协议是无连接的不可靠协议，并且没有超时重传机制，会发生丢包，收到重复包，乱序等情况。但是UDP网络开销小，适合实时通讯例如QQ语音，QQ视频，直播等等。
 当我们看重的是数据传输的完整性，可控制性和可靠性时，TCP协议是最好的选择。但当我们看重数据的传输性能而不是完整性时，UDP是最好的选择。
  TCP的三次握手  客户端建立连接控制模块TCB，向服务端发送请求连接的报文段，其中报文段的首部SYN=1，为自己选择一个初始的序号seq=i。TCP规定SYN=1的报文段不允许携带数据，但是要消耗掉一个序号，发送完毕客户端进入同步发送(SYN_sent)状态。
 服务端收到请求之后，如果同意建立连接，会向客户端发送确认。确认报文中的ACK=1，SYN=1,确认序号ack=i+1，为自己选择一个初始序号seq=k。该报文段也不能携带数据，但要消耗掉一个序号。发送完毕，服务端进入同步收到（SYN_RCVD）状态。
 客户端收到后，还要向服务端给出确认。确认报文中ACK=1,确认号ack=k+1，自己的序号为seq=i+1。ACK报文段可以携带数据，不携带数据不消耗序号。如果不携带数据则下一个序号仍为seq=i+1。
  TCP的四次挥手  客户端向服务端发出释放连接的报文后，客户端就停止发送数据。释放连接的报文中FIN=1，初始序号seq=u(等于前面已经传送过来的数据的最后一个字节的序号+1)。此时客户端进入终止等待状态(FIN_wait1),TCP规定，FIN报文即使不携带数据也要消耗掉一个序号。 服务端收到后，要想客户端发送确认。确认报文中ACK=1，确认号ack=u+1，为自己选择一个初始序号seq=v，自己进入到关闭等待状态(CLOSE_wait)。此时处于半关闭状态，客户端没有数据要发送了，但是服务端可能还有数据要发送，客户端依旧要接收。 服务端数据发送完毕之后，会向客户端发出释放连接的报文。报文中FIN=1，ACK=1，ack=u+1，seq=w。此时服务端进入最后确认状态(LAST_ACK)。 客户端收到服务端的释放连接报文后，必须向服务端发送确认报文。确认报文中ACK=1，ack=w+1，seq=u+1。此时客户端进入到时间等待状态(TIME_wait)。此时TCP连接还没有释放，必须经过2MSL的时间，当客户端撤销相应的TCB之后才进入CLOSED状态，但是服务端只要收到客户端发出的确认报文后，就马上进入CLOSED状态。  为什么TCP连接的时候是三次握手，关闭却是四次挥手  建立连接时服务端收到客户端发送的SYN连接请求报文后，可以直接发送ACK+SYN报文来回复，其中ACK用来应答，SYN用来同步。但是释放连接时，服务端收到客户端发来的FIN报文之后，可能并不会立即关闭连接，只能先向客户端发送一个ACK报文来应答，告诉客户端你发送的FIN报文我已经收到了。然后等服务端的数据都发送完毕了，才能发送FIN报文，因此需要4步。  为什么Time_wait状态要经过2MSL的时间才能进入CLOSED状态  虽然按道理，四个报文发送完毕我们就可以关闭连接了。但是，我们必须假设网络是不可靠的，有可能最后一个ACK报文丢失，客户端的TIME_ wait状态就是用来重发ACK报文的，如果服务端没有收到我们发送的ACK报文，它就会不断重复发送FIN片段。所以客户端不能立即关闭，必须确认服务端收到了该ACK报文。当客户端发送完最后一个ACK报文，进入到Time_wait状态之后，会设置一个计数器，等待2MSL的时间。如果2MSL时间内，收到了服务端发送的FIN报文，客户端要再一次向服务端发送ACK报文，并将计时器重置，继续等待2MSL的时间。如果在2MSL的时间内，没有接收到服务端发来的FIN报文，就证明服务端收到了最后一个ACK报文，客户端进入CLOSED状态，结束TCP连接。   MSL指一个报文片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大的时间。如果直到2MSL客户端都没有接收到服务端的FIN报文，那么客户端就认为服务端接收到了ACK。
 </description>
    </item>
    
  </channel>
</rss>