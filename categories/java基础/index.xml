<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java基础 on Gao J1e&#39;s Blog</title>
    <link>https://gj1e.github.io/categories/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Java基础 on Gao J1e&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>郜杰</copyright>
    <lastBuildDate>Mon, 23 Mar 2020 21:22:11 +0800</lastBuildDate>
    
	<atom:link href="https://gj1e.github.io/categories/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ArrayList与LinkedList</title>
      <link>https://gj1e.github.io/posts/2020/03/arraylist%E4%B8%8Elinkedlist/</link>
      <pubDate>Mon, 23 Mar 2020 21:22:11 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2020/03/arraylist%E4%B8%8Elinkedlist/</guid>
      <description> ArrayList底层使用的是一个数组来存储元素，初始容量大小为10。扩容的方式为（旧容量*3）/2+1。也就是说每次扩容大概会增加50%，如果你有一个包含大量元素的ArrayList，那么最终将会有大量的空间浪费掉。
 小建议：在创建ArrayList时，要养成合理预估数据量大小，尽量在创建时就把预估容量大小初始化好。
注意：以无参数构造方法创建 ArrayList 时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为10。
 LinkedList底层采用的是一个双向链表结构（JDK1.6之前为循环链表，JDK1.7之后取消了循环。）
ArrayList与LinkedList的区别  ArrayList底层采用数组来保存元素，LinkedList底层采用双向链表来存储元素。
 ArrayList支持快速随机访问，LinkedList不支持。
 ArrayList的空间浪费体检在列表结尾留有一定的容量空间，LinkedList的空间浪费则体现在每个元素都需要消耗相当的空间用来存储指针和数据。
 ArrayList和LinkedList在尾部添加或删除一个元素的开销时间都是固定的。如果在ArrayList中间或者头部插入或删除一个元素，就意味着列表中的剩余元素都会移动，而在LinkedList中间或头部插入或删除一个元素，所用的时间是固定的。
  </description>
    </item>
    
    <item>
      <title>Java基础知识点</title>
      <link>https://gj1e.github.io/posts/2020/03/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Sun, 22 Mar 2020 22:26:39 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2020/03/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>字符型常量和字符串常量的区别 形式上：
 字符型常量使用单引号引起的一个字符，字符串常量是双引号引起的若干的字符。  含义上：
 字符常量相当于一个（ASCII值）可以参加表达式运算；字符串常量表示的是一个地址值，表示该字符串在内存中的地址。  内存上：
 char型为2个字节，字符串常量为若干个字节。   Constructor可以被重写吗 构造器不可以被重写，但是可以被重载。
重载与重写的区别  重载就是发生在同一个类型。方法名相同，参数类型，个数不同，返回值和访问修饰符也可以不同。
 重写就是子类继承父类，子类重写父类允许子类所能访问的方法（言外之意就是父类中private修饰符修饰的方法，子类不能重写）
 重写规则：方法名和参数类型必须相同，返回值范围小于等于父类，抛出异常的范围也要小于等于父类，访问修饰符的范围的要大于等于父类。
  String、StringBuffer和StringBuilder的区别，String为啥是不可变的 可变性：
 String之所以不可变是因为String底层使用了final修饰符来修饰保存字符串的字符数组。private final char value[]
 StringBuffer和StringBuilder可变是因为它俩都继承自AbstractStringBuilder类，而AbstractStringBuilder中底层用来保存字符串的数组没有用final关键字来修饰。
  安全性：
 String是不可变的，可以看作常量，所以是线程安全的。 StringBuffer对父类AbstractStringBuilder中提供的一些对字符串操作的方法增加了同步锁，或者对调用的方法增加了同步锁，所以StringBuffer是线程安全的。 StringBuilder没有对父类中提供的方法，或者在调用父类方法时没有加锁，所以SringBuilder不是线程安全的。   性能：
 每次对String类型进行改变的时候，都会生成一个新的String对象，然后将指针指向新的String对象。
 StringBuffer每次都会对StringBuffer对象本身进行操作，而不是生成新的对象并改变对象的引用。
 同等情况下StringBuilder比StringBuffer的性能高10%左右，但是线程是不安全的。
  接口与抽象类的区别 如果一个类含有抽象方法，则称这个类为抽象类。抽象类必须在类前用Abstract关键字来修饰，抽象方法就是没有具体实现的方法。
 抽象类中可以含有非抽象方法，但是接口不可以。 &amp;gt; 注意：JDK1.8开始接口可以定义静态方法，可以直接用接口名调用，但实现类和实现是不可以调用的。
 接口中的变量会被隐式的指定为public static final 变量，方法则会被隐式的指定为public abstract 方法。 抽象方法则可以使用public protected和default这些修饰符。
 一个类可以实现多个接口，但是只能继承一个类。</description>
    </item>
    
    <item>
      <title>Hashmap总结</title>
      <link>https://gj1e.github.io/posts/2020/03/hashmap%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 03 Mar 2020 20:55:05 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2020/03/hashmap%E6%80%BB%E7%BB%93/</guid>
      <description> Hashmap是线程安全的吗 不是。Hashmap中的方法是非同步的，并不能直接在多线程并发的环境下直接使用。假如线程A和线程B同时对同一个数组位置调用addEntry，那么这两个线程会同时获得现在的头节点，然后A写入新的头节点之后，B也写入新的头节点，那么B的写入操作会覆盖掉A的写入操作，造成A写入操作的丢失。
Hashmap和Hashtable的区别  继承不同
 Hashmap继承自abstractMap Hashtable继承自dictionary  Hashtable是线程安全的，Hashmap不是。
 Hashtable中的key和value都不允许出现null值。Hashmap可以，Hashmap允许key可以为null，这样的键只能有一个。但是允许多个key所对应的value为null。
 数组的初始容量大小和容量增长方式不一样
 Hashtable的数组初始大小为11，增长方式是old*2+1 Hashmap的数组初始大小为16，增长方式是翻倍  计算下标的方式不同
 Hashtable是h%length Hashmap是h&amp;amp;(length-1)   哈希值的使用不同
 Hashtable是直接使用对象的Hashcode Hashmap是重新计算哈希值   Hashmap的初始容量为什么设置为16  首先，length为2的整数次幂的话，h&amp;amp;(length-1)就相当于对length取模，提高了运算效率。 其次，是为了保证散列的均匀性，length为2的整数次幂的话，length-1为奇数，奇数的最后一位是1，h&amp;amp;(length-1)的结果就有可能为奇数，也有可能为偶数，也就是结果的最后一次有可能是0，也有可能是1。这样便保证了散列的均匀性。如果length为奇数，length-1就是偶数，最后一位是0。这样h&amp;amp;(length-1)的结果就只能为偶数，也就是最后一位只能是0，这样任何哈希值都只能被散列在偶数的下标位置上，浪费了近一半的空间。 所以length为2的整数次幂是为了是哈希值发生碰撞的概率更小，散列的更加均匀。  Hashmap之put()方法的执行过程  图片出处见水印
 </description>
    </item>
    
  </channel>
</rss>