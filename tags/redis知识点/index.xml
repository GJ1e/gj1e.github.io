<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis知识点 on Gao J1e&#39;s Blog</title>
    <link>https://gj1e.github.io/tags/redis%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
    <description>Recent content in Redis知识点 on Gao J1e&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>郜杰</copyright>
    <lastBuildDate>Tue, 26 Nov 2019 20:25:20 +0800</lastBuildDate>
    
	<atom:link href="https://gj1e.github.io/tags/redis%E7%9F%A5%E8%AF%86%E7%82%B9/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis的持久化</title>
      <link>https://gj1e.github.io/posts/2019/11/redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Tue, 26 Nov 2019 20:25:20 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/11/redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description> Redis支持内存数据持久化，将存储在内存中的数据以某种形式持久化到硬盘中，Redis重启后仍能加载硬盘中的数据重新使用。
Redis有两种持久化方式：一种RDB，一种AOF。
 Redis默认的持久化方式为RDB，两种持久化方式可以单独使用，也可结合使用。
 RDB  RDB方式是通过快照来完成的，当符合一定的条件时，Redis会自动将内存中的所有数据进行快照并存储到硬盘上。进行快照的条件在配置文件中指定，有两个参数：时间和改动的键的个数。
 当在指定时间内被更改的键的个数大于指定数值时，就会进行快照。
 Redis在以RDB方式持久化数据时，是以一个子进程来做的，也就是说进行RDB持久化时，不会影响Redis的主进程对外的使用。
   RDB并不能绝对保证数据的不丢失
 RDB的快照过程：  Redis使用fork函数复制一份当前进程(父进程)的副本(子进程)。 父进程继续接受并处理客户端发来的命令，而子进程开始将内存中的数据写入到硬盘中的临时文件。 当子进程写入完所有数据后，会用该临时文件替换旧的RDB文件(默认是压缩过的)。   可以通过SAVE和BGSAVE命令来手动快照，前者是由主进程进行快照，会阻塞其它请求；后者是通过fork子进程来进行快照。
 AOF  AOF持久化策略是将发送到Redis端的每一条命令都记录下来，并保存到硬盘中的AOF文件，AOF文件和RDB文件位置相同。   AOF持久化方式是默认关闭的，通过配置文件中的appendonly参数设为YES开启。
AOF文件对于查询的操作不做记录。
 AOF文件到磁盘的同步策略  appendfsync always 每次都同步(最安全，但也最慢) appendfsync everysec 每秒同步（默认的同步策略） appendfsync no 不主动同步，由操作系统来决定   文件默认先写到缓存中，系统每30秒同步一次，才是真正写入到磁盘
 </description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://gj1e.github.io/posts/2019/11/redis/</link>
      <pubDate>Sun, 24 Nov 2019 18:48:38 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/11/redis/</guid>
      <description>什么是Redis  Redis是一个用C语言写的，开源、支持网络、基于内存、可选持久性的、非关系型、Key-Value数据库。它是一个内存中的数据结构存储系统，可以用作数据库，缓存和消息中间件。  使用Redis有哪些好处  速度快：因为数据结构在内存中类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)
 支持丰富的数据类型：String，list，set，sorted set，hash
 支持事务：操作都是原子性，所谓原子性就是对数据的更改，要么全部执行，要么全部不执行。
 丰富的特性：可用于缓存，按Key设置过期时间，过期后将会自动删除。
  Redis和Memcached区别和比较  Redis不仅仅支持简单的k/v类型的数据，同时还提供string(字符串)、list(链表)、set(集合)、zset(sorted set &amp;ndash;有序集合)和hash（哈希类型）等数据结构的存储。 memcache支持简单的数据类型，String。
 Redis支持数据的备份，即master-slave模式的数据备份。
 Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而Memecache把数据全部存在内存之中
 redis的速度比memcached快很多
 Memcached是多线程，非阻塞IO复用的网络模型；Redis使用单线程的IO复用模型。
   有持久化需求或者对数据结构和处理有高级要求的应用，选择redis，其他简单的key/value存储，选择memcached。 对于两者的选择需要要看具体的应用场景，如果需要缓存的数据只是key-value这样简单的结构时，则还是采用memcache，它也足够的稳定可靠。 如果涉及到存储，排序等一系列复杂的操作时，毫无疑问选择redis。
 Redis有哪几种数据淘汰策略  volatile-lru：从已设置过期时间的数据集中挑选最近最少使用的数据进行淘汰。
 volatile-ttl：从已设置过期时间的数据集中挑选将要过期的数据进行淘汰。
 volatile-random：从已设置过期时间的数据集中随机选择数据进行淘汰。
 allkeys-lru：从数据集中挑选最近最少使用的数据进行淘汰。
 allkeys-random：从数据集中随机选择数据进行淘汰。
 no-enviction：禁止淘汰数据。
  Redis的内存回收算法  LRU和引用计数器算法  Redis分布式锁 待总结。。。</description>
    </item>
    
  </channel>
</rss>