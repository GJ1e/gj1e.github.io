<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>冒泡排序 on Gao J1e&#39;s Blog</title>
    <link>https://gj1e.github.io/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
    <description>Recent content in 冒泡排序 on Gao J1e&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>郜杰</copyright>
    <lastBuildDate>Fri, 06 Dec 2019 22:53:25 +0800</lastBuildDate>
    
	<atom:link href="https://gj1e.github.io/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>冒泡排序</title>
      <link>https://gj1e.github.io/posts/2019/12/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 06 Dec 2019 22:53:25 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/12/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>  冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。
 冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。
  算法步骤  比较相邻的两个元素，如果前者比后者大，就交换。
 对每一对相邻的元素做同样的工作，从开始的第一对，到结尾的最后一对。都执行完之后，最后一个元素是最大的。
 继续针对所有的元素重复以上的步骤，最后一个除外。
 持续每次对越来越少的元素重复以上的步骤，直到没有任何一对元素需要比较。
  /** * @Author GJ1e * @Create 2019/9/21 * @Time 15:47 * */ public class BubbleSort { private static void sort (Comparable[] a){ if(a==null||a.length&amp;lt;=1) return; for (int i = 0;i&amp;lt;a.length-1;i++){ //设置一个flag标记 boolean flag = true; for (int j = 0;j&amp;lt;a.length-1;j++){ if (a[j].compareTo(a[j+1])&amp;gt;0){ Comparable temp = a[j]; a[j]=a[j+1]; a[j+1]=temp; flag = false; } } if (flag) break; } } }  </description>
    </item>
    
  </channel>
</rss>