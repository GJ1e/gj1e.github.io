<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>G1垃圾收集器 on Gao J1e&#39;s Blog</title>
    <link>https://gj1e.github.io/tags/g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</link>
    <description>Recent content in G1垃圾收集器 on Gao J1e&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>郜杰</copyright>
    <lastBuildDate>Wed, 30 Oct 2019 20:41:32 +0800</lastBuildDate>
    
	<atom:link href="https://gj1e.github.io/tags/g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JVM垃圾收集器</title>
      <link>https://gj1e.github.io/posts/2019/10/jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</link>
      <pubDate>Wed, 30 Oct 2019 20:41:32 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/10/jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</guid>
      <description>垃圾收集器主要用于堆内存中。
 图中垃圾收集器之间有连线的，就代表可以相互配合使用。
 Serial、ParNew、Parallel Scavenge用于新生代；CMS、Serial Old、Paralled Old用于老年代。 并且他们相互之间以相对固定的组合使用。G1是一个独立的收集器不依赖其他6种收集器。
Serial收集器  它是单线程的收集器，使用复制算法。在进行垃圾回收时需要停止其他的所有工作线程(Stop The World)。  ParNew收集器  它其实就是Serial收集器的多线程版本，使用的是复制算法。
 它在单线程环境下没有Serial好，因为存在线程开销。但随着CPU的增加就可以体现出优势。
 它默认开启的收集线程数与CPU的数量相同。
  Parallel Scavenge收集器  用于新生代，多线程并行，使用复制算法与ParNew相似。
 与ParNew不同的是，它更关注垃圾回收的吞吐量。它提供两个参数，一个用于控制最大垃圾收集停顿时间，一个用于控制吞吐量大小。
   吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)
最大垃圾收集停顿时间越小，系统设置新生代越少，GC频率增加。停顿时间缩短是以牺牲吞吐量和新生代空间换取的
 Parallel Old收集器  Parallel Old收集器，老年代的收集器，是Parallel Scavenge老年代的版本。但是使用的是标记-整理算法。
 Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较不错的应用组合，在注重吞吐量及CPU资源敏感的场合，可以优先考虑Parallel Scavenge收集器+Parallel Old收集器。
  Serial Old收集器  Serial Old收集器，老年代的收集器，与Serial一样是单线程。不同的是算法用的是标记-整理，因为老年代里面对象的存活率高，如果依旧是用复制算法，需要复制的内容较多，性能较差。  CMS收集器  它是一种以最短垃圾回收停顿时间为目标的收集器，使用的是标记——清除算法。 运作过程分为四步：初始标记-&amp;gt;并发标记-&amp;gt;重新标记-&amp;gt;并发清理。其中初始标记和重新标记这两步仍然需要暂停用户所有线程。
 初始标记：仅仅只标记一下GCRoots可以直接关联到的对象，速度很快。
 并发标记：是从GCRoot开始继续向下进行标记。
 重新标记：是为了修正并发标记期间发生变动的标记，这个阶段停顿时间比初始标记长，比并发标记短。
 并发清除：清除老年代的垃圾。
   缺点：</description>
    </item>
    
  </channel>
</rss>