<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>选择排序 on Gao J1e&#39;s Blog</title>
    <link>https://gj1e.github.io/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
    <description>Recent content in 选择排序 on Gao J1e&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>郜杰</copyright>
    <lastBuildDate>Sat, 14 Dec 2019 23:44:53 +0800</lastBuildDate>
    
	<atom:link href="https://gj1e.github.io/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>选择排序</title>
      <link>https://gj1e.github.io/posts/2019/12/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 14 Dec 2019 23:44:53 +0800</pubDate>
      
      <guid>https://gj1e.github.io/posts/2019/12/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>  选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧  算法步骤  首先在未排序的序列中找到最小（大）元素，然后将它放在序列的最前（后）面。
 再从剩下的元素中寻找最小（大）元素，然后将它放在已排序序列的前（后）面。
 重复第二步，直到所有元素排序完毕。
  /** * @Author GJ1e * @Create 2019/9/21 * @Time 16:30 * */ public class SelectionSort { private static void sort (Comparable[] a){ for(int i = 0;i&amp;lt;a.length-1;i++){ //循环N轮 int min = i; //记录最小元素的下标 for (int j = i+1; j &amp;lt; a.length; j++) { //每轮比较N-i次 if(a[min].compareTo(a[j])&amp;gt;0) //a[min]&amp;gt;a[j],更新最小值的下标 min = j; } if (i!= min) { //最小元素的下标值和原来不一样就更新。 Comparable temp = a[min]; a[min] = a[i]; a[i] = temp; } } } }  </description>
    </item>
    
  </channel>
</rss>